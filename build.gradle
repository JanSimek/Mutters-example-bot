buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'de.undercouch:gradle-download-task:3.1.1'
    }
}

plugins {
    id 'java'
    id 'application'
//    id 'de.undercouch.download'
}

apply plugin: 'de.undercouch.download'

group 'xyz.simek'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenLocal();
    mavenCentral()
}

application {
    mainClassName = "xyz.simek.testbot.Main"
}

configurations {
    openNLPCompile
}

dependencies {

    compile 'com.rabidgremlin:mutters-ink-bot:4.4.0'
    compile 'com.rabidgremlin:mutters-opennlp-intent:4.4.0'
    compile 'com.rabidgremlin:mutters-opennlp-ner:4.4.0'
    compile 'com.rabidgremlin:mutters-slots:4.4.0'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'

    openNLPCompile 'org.apache.opennlp:opennlp-tools:1.6.0'

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

task createModelsDir {
    doLast{
        project.file('src/main/resources/models').mkdirs()
    }
}

createModelsDir.outputs.upToDateWhen { false }

// build model
task generateIntentModel(type:JavaExec) {
    main = 'opennlp.tools.cmdline.CLI'
    classpath = configurations.openNLPCompile
    args = ['DoccatTrainer',
            '-model',
            'src/main/resources/models/en-cat-taxi-intents.bin',
            '-lang',
            'en',
            '-data',
            'src/main/resources/TaxiBotIntents.txt',
            '-encoding',
            'UTF-8',
            '-featureGenerators',
            'opennlp.tools.doccat.NGramFeatureGenerator,opennlp.tools.doccat.BagOfWordsFeatureGenerator',
            '-params',
            'src/main/resources/TaxiBotIntentsParams.txt',
            '-tokenizer',
            'opennlp.tools.tokenize.WhitespaceTokenizer']
}

generateIntentModel.dependsOn createModelsDir

task generateAddressModel(type:JavaExec) {
    main = 'opennlp.tools.cmdline.CLI'
    classpath = configurations.openNLPCompile
    args = ['TokenNameFinderTrainer',
            '-model',
            'src/main/resources/models/en-ner-address.bin',
            '-lang',
            'en',
            '-data',
            'src/main/resources/NERAddresses.txt',
            '-encoding',
            'UTF-8',
            '-params',
            'src/main/resources/NERAddressesParams.txt']
}
generateAddressModel.dependsOn createModelsDir

// these snippets from https://github.com/spinscale/elasticsearch-ingest-opennlp

// download the models before the tests are run, also needed for packaging
// download the models but dont overwrite existing ones

task downloadModels  {
    doLast{
        downloadIfNotExists('http://opennlp.sourceforge.net/models-1.5/en-ner-person.bin',   'en-ner-persons.bin')
        downloadIfNotExists('http://opennlp.sourceforge.net/models-1.5/en-ner-location.bin', 'en-ner-locations.bin')
        downloadIfNotExists('http://opennlp.sourceforge.net/models-1.5/en-ner-date.bin',     'en-ner-dates.bin')
    }
}

downloadModels.dependsOn createModelsDir

def downloadIfNotExists(String url, String file) {
    def dir = project.file('src' + File.separator + 'main' + File.separator + 'resources' + File.separator + 'models')

    if (new File(dir,file).exists() == false) {
        download {
            src url
            dest new File(dir, file)
        }
    }
}

clean {
    delete "src/main/resources/models"
}

processResources.dependsOn downloadModels
processResources.dependsOn generateIntentModel
processResources.dependsOn generateAddressModel

